// int solve(vector<vector<int>>& g,int i,int j,vector<vector<int>>&dp)
    // {
    //     int m=g.size(),n=g[0].size();
    //     if(i==m-1 && j==n-1 ) return 1;
    //     if( i==m || j==n || g[i][j]==1) return 0;
    //     if(dp[i][j]!=-1) return dp[i][j];
    //     int ans=solve(g,i+1,j,dp) + solve(g,i,j+1,dp);
    //     return dp[i][j]= ans;
    // }
    int uniquePathsWithObstacles(vector<vector<int>>& g) {
         int m=g.size(),n=g[0].size();
        if(g[m-1][n-1]==1 || g[0][0]==1) return 0;
        vector<vector<int>>dp(m,vector<int>(n,0));
        dp[0][0]=1;
        for(int i=0;i<m;i++)
        {
            if(i!=0 && g[i][0]==0) dp[i][0]=dp[i-1][0];
            for(int j=1;j<n;j++) if(g[i][j]!=1) dp[i][j]=(i==0?0: dp[i-1][j])+dp[i][j-1];
        }
        return dp[m-1][n-1];
        // return solve(g,0,0,dp);
    }
